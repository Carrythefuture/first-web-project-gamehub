class GameOverScene extends Phaser.Scene {
	constructor() {
		super({ key: "GameOverScene" });
	}

	init(data) {
		this.finalScore = data?.score ?? 0;
		this.finalTime = data?.time ?? 0;
		this.ending = data.ending;
		this.startTime = data.startTime;
		this.endTime = data.endTime;
		
		// ‚úÖ Ï†êÏàò Í∏∞Î∞ò Ìè¨Ïù∏Ìä∏ Í≥ÑÏÇ∞ (500Î∂ÑÏùò 1, ÏµúÏÜå 1Ìè¨Ïù∏Ìä∏ Î≥¥Ïû•)
		    this.finalPoint = Math.max(1, Math.floor(this.finalScore / 200));
	}

	create() {
		const pointValue = this.finalPoint; // ÏïàÏ†ÑÌïòÍ≤å Ï†ÄÏû•
		
		const payload = {
			userId: loginId,
			game_seq: parseInt(new URLSearchParams(window.location.search).get("game_seq")),
			gameScore: this.finalScore,
			gameStartTime: Number(this.startTime),
			gameEndTime: Number(this.endTime)

		};

		console.log("Ï†ÑÏÜ°Ìï† JSON:", JSON.stringify(payload)); // ÌôïÏù∏Ïö© Î°úÍ∑∏

		$.ajax({
			url: "/api/game/recordInsert",
			contentType: "application/json",
			type: "post",
			data: JSON.stringify(payload)

		}).done(function(resp) {

			console.log(resp);

		});

		$.ajax({
			url: "/api/point/gameOver",
			type: "POST",
			data: {
				seq: 6,               // POINT ÌÖåÏù¥Î∏îÏùò SEQ
				pointValue: pointValue       // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú Í≥ÑÏÇ∞Îêú Ìè¨Ïù∏Ìä∏ Í∞í
			},
			success: function(response) {
				console.log("Ìè¨Ïù∏Ìä∏ ÏßÄÍ∏â ÏÑ±Í≥µ:", response);
			},
			error: function(xhr) {
				console.error("ÏóêÎü¨ Î∞úÏÉù:", xhr.responseText);
			}
		});
		// 1. Î∞∞Í≤Ω ÍΩâ Ï±ÑÏö∞Í∏∞
		this.add.image(400, 400, "background")
			.setDisplaySize(800, 800)
			.setDepth(-2);

		// 2. Ìù∞ÏÉâ Î∞ïÏä§ (Í≤∞Í≥º ÌëúÏãú ÏòÅÏó≠ Í∞ïÏ°∞)
		const graphics = this.add.graphics();
		graphics.fillStyle(0xffffff, 1);
		graphics.fillRoundedRect(97, 100, 606, 600, 20);

		// 3. Ï£ºÏù∏Í≥µ Í≥†ÏñëÏù¥ (Ï£ΩÏñ¥ÏÑú ÏãúÎ¨¥Î£©Ìïú Î≤ÑÏ†ÑÏù¥ ÏûàÏúºÎ©¥ ÍµêÏ≤¥ Í∞ÄÎä•)
		const cat = this.add.image(400, 250, "gameover_cat")
			.setDisplaySize(120, 120)
			.setDepth(1);

		// ÏÇ¥Ïßù ÏúÑÏïÑÎûò Ïï†ÎãàÎ©îÏù¥ÏÖò (Ïö∏Î®πÏù¥Îäî ÎäêÎÇå)
		this.tweens.add({
			targets: cat,
			y: 260,
			duration: 600,
			yoyo: true,
			repeat: -1,
			ease: "Sine.easeInOut"
		});

		// 4. "GAME OVER" ÌÖçÏä§Ìä∏ (ÌïëÌÅ¨+ÌÖåÎëêÎ¶¨Î°ú Í∑ÄÏóΩÍ≤å)
		this.add.text(400, 360, "ÌôîÏÇ¥ Î™ªÌîºÌñàÎÉ•..", {
			fontSize: "50px",
			fontFamily: "Arial Black, sans-serif",
			color: "#ff6699",
			stroke: "#ffffff",
			strokeThickness: 8,
			shadow: { offsetX: 3, offsetY: 3, color: "#000", blur: 5, fill: true }
		}).setOrigin(0.5);

		// 5. Ï†êÏàò ÌëúÏãú
		this.add.text(400, 420, `Ï†êÏàò : ${this.finalScore}`, {
			fontSize: "26px",
			fontFamily: "Arial, sans-serif",
			color: "#333"
		}).setOrigin(0.5);

		this.add.text(400, 460, `ÏµúÍ≥† Ï†êÏàò : ${bestScore}`, {
			fontSize: "26px",
			fontFamily: "Arial, sans-serif",
			color: "#666"
		}).setOrigin(0.5);

		// 6. ÏÉùÏ°¥ ÏãúÍ∞Ñ ÌëúÏãú
		this.add.text(400, 500, `ÏÉùÏ°¥ ÏãúÍ∞Ñ : ${this.formatTime(this.finalTime)}`, {
			fontSize: "26px",
			fontFamily: "Arial, sans-serif",
			color: "#444"
		}).setOrigin(0.5);

		// 7. Ïû¨ÏãúÏûë ÌÖçÏä§Ìä∏ (ÍπúÎπ°Ïù¥Îäî Ìö®Í≥º)
		const restartText = this.add.text(400, 560, "SPACE / CLICK: Îã§Ïãú ÏãúÏûë", {
			fontSize: "22px",
			fontFamily: "Arial, sans-serif",
			color: "#555"
		}).setOrigin(0.5).setInteractive({ useHandCursor: true });

		this.tweens.add({
			targets: restartText,
			alpha: 0,
			duration: 700,
			yoyo: true,
			repeat: -1
		});

		// üëâ ÏóÖÏ†Å Ï≤¥ÌÅ¨ (ÏÇ¨Îßù Í¥ÄÎ†®)
		const mainScene = this.scene.get("MainScene");
		mainScene.deathCount++;
		mainScene.isGameOver = true;

		// Ï†êÏàò ÏóÖÏ†Å
		if (mainScene.score >= 1000) mainScene.unlockAchievement("MEOW_SCORE_1000");
		if (mainScene.score >= 5000) mainScene.unlockAchievement("MEOW_SCORE_5000");
		if (mainScene.score >= 10000) mainScene.unlockAchievement("MEOW_SCORE_10000");

		// ÏÇ¨Îßù Í¥ÄÎ†® ÏóÖÏ†Å
		if (mainScene.deathCount === 1) mainScene.unlockAchievement("MEOW_FIRST_DEATH");
		if (mainScene.restartCount >= 3) mainScene.unlockAchievement("MEOW_RESTART_3X");
		if (mainScene.isGameOver && mainScene.score === 0) mainScene.unlockAchievement("MEOW_DIE_AT_0");
		for (const id in achievements) {
			const ach = achievements[id];
			if (!mainScene.unlockedAchievements.has(id) && ach.condition(mainScene)) {
				mainScene.unlockAchievement(id);
			}
		}

		// Ïä§ÌéòÏù¥Ïä§Î∞î ÏûÖÎ†• ‚Üí Îã§Ïãú ÏãúÏûë
		this.input.keyboard.once("keydown-SPACE", () => this.handleRestart(mainScene));

		// ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ ÏûÖÎ†• ‚Üí Îã§Ïãú ÏãúÏûë
		restartText.on("pointerdown", () => this.handleRestart(mainScene));
	}

	handleRestart(mainScene) {
		mainScene.restartCount++;

		// Ïû¨ÏãúÏûë Í¥ÄÎ†® ÏóÖÏ†Å Ï¶âÏãú Ï≤¥ÌÅ¨
		if (mainScene.restartCount >= 3) {
			mainScene.unlockAchievement("MEOW_RESTART_3X");
		}

		this.scene.stop("GameOverScene");
		this.scene.start("MainScene", { loginId: loginId }); // ‚úÖ Ïó¨Í∏∞ÏÑú Í∞ôÏù¥ ÎÑòÍ≤®Ï§å
	}

	formatTime(ms) {
		const totalSeconds = Math.floor(ms / 1000);
		const minutes = Math.floor(totalSeconds / 60);
		const seconds = totalSeconds % 60;
		return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
	}
}
